// Package specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package specs

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Defines values for ApplicationStatus.
const (
	ApplicationStatusCreated ApplicationStatus = "created"

	ApplicationStatusDone ApplicationStatus = "done"

	ApplicationStatusInProgress ApplicationStatus = "in_progress"
)

// Defines values for UserRole.
const (
	UserRoleModerator UserRole = "moderator"

	UserRoleUser UserRole = "user"

	UserRoleWorker UserRole = "worker"
)

// Сущность заявки
type ApplicationResponse struct {
	CreatedAt   time.Time         `json:"created_at"`
	CreatorId   string            `json:"creator_id"`
	Id          string            `json:"id"`
	PerformerAt *time.Time        `json:"performer_at,omitempty"`
	PerformerId *string           `json:"performer_id,omitempty"`
	PhotoIds    []string          `json:"photo_ids"`
	Status      ApplicationStatus `json:"status"`
	Subtype     string            `json:"subtype"`
	Text        string            `json:"text"`
	Type        string            `json:"type"`
	UpdatedAt   time.Time         `json:"updated_at"`
}

// ApplicationStatus defines model for ApplicationStatus.
type ApplicationStatus string

// Сущность пользователя.
type ApplicationSubtype struct {
	Id    string `json:"id"`
	Title string `json:"title"`
	Type  string `json:"type"`
}

// Сущность пользователя.
type ApplicationType struct {
	Id    string `json:"id"`
	Title string `json:"title"`
}

// Параметры запроса на создание заявки.
type CreateApplicationPayload struct {
	PhotoIds *[]string `json:"photo_ids,omitempty"`
	Subtype  string    `json:"subtype"`
	Text     string    `json:"text"`
	Type     string    `json:"type"`
}

// c
type CreateUserPayload struct {
	FirstName string   `json:"first_name"`
	LastName  string   `json:"last_name"`
	Phone     string   `json:"phone"`
	Role      UserRole `json:"role"`
}

// Error defines model for Error.
type Error struct {
	Code    int     `json:"code"`
	Details *string `json:"details,omitempty"`
	Message string  `json:"message"`
}

// Ответ на запрос на получение списка заявок.
type ListApplicationResponse struct {
	Data []ApplicationResponse `json:"data"`

	// Полное количество элементов, попадающих под параметра запроса.
	Meta ResponseMetaTotal `json:"meta"`
}

// Ответ на запрос на получение списка пользователей.
type ListApplicationSubtypes struct {
	Data []ApplicationSubtype `json:"data"`

	// Полное количество элементов, попадающих под параметра запроса.
	Meta ResponseMetaTotal `json:"meta"`
}

// Ответ на запрос на получение списка пользователей.
type ListApplicationTypes struct {
	Data []ApplicationType `json:"data"`

	// Полное количество элементов, попадающих под параметра запроса.
	Meta ResponseMetaTotal `json:"meta"`
}

// Ответ на запрос на получение списка пользователей.
type ListUsersResponse struct {
	Data []UserResponse `json:"data"`

	// Полное количество элементов, попадающих под параметра запроса.
	Meta ResponseMetaTotal `json:"meta"`
}

// Полное количество элементов, попадающих под параметра запроса.
type ResponseMetaTotal struct {
	Total int `json:"total"`
}

// Параметры запроса на редактирование пользователя.
type UpdateApplicationPayload struct {
	PerformerId   *string            `json:"performer_id,omitempty"`
	PerformerTime *time.Time         `json:"performer_time,omitempty"`
	Status        *ApplicationStatus `json:"status,omitempty"`
}

// Сущность пользователя.
type UserResponse struct {
	CreatedAt time.Time `json:"created_at"`
	FirstName string    `json:"first_name"`
	Id        string    `json:"id"`
	LastName  string    `json:"last_name"`
	Phone     string    `json:"phone"`
	Role      UserRole  `json:"role"`
}

// UserRole defines model for UserRole.
type UserRole string

// Pagination defines model for pagination.
type Pagination struct {
	// Количество элементов на странице.
	Limit int `json:"limit"`

	// Количество элементов, которые нужно пропустить от начала списка.
	Offset int `json:"offset"`
}

// Sort defines model for sort.
type Sort struct {
	// Свойство, по которому нужно сортировать массив.
	SortKey string `json:"sortKey"`

	// Возможные значения порядка сортировки.
	SortOrder string `json:"sortOrder"`
}

// CreateApplicationJSONBody defines parameters for CreateApplication.
type CreateApplicationJSONBody CreateApplicationPayload

// UpdateApplicationJSONBody defines parameters for UpdateApplication.
type UpdateApplicationJSONBody UpdateApplicationPayload

// ListApplicationsParams defines parameters for ListApplications.
type ListApplicationsParams struct {
	// Идентификаторы иссполнителей, по которым нужно получить заявки.
	PerformerId *string `json:"performer_id,omitempty"`

	// Идентификаторы создателей, по которым нужно получить заявки.
	CreatorId *string `json:"creator_id,omitempty"`

	// Получение заявок по статусу
	Status *ApplicationStatus `json:"status,omitempty"`

	// Получение заявок по типу
	Type       *string     `json:"type,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	Sort       *Sort       `json:"sort,omitempty"`
}

// ListApplicationsParamsSortSortOrder defines parameters for ListApplications.
type ListApplicationsParamsSortSortOrder string

// ListApplicationSubTypesParams defines parameters for ListApplicationSubTypes.
type ListApplicationSubTypesParams struct {
	TypeId *string `json:"typeId,omitempty"`

	// Получение статей по строке
	Search     *string     `json:"search,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	Sort       *Sort       `json:"sort,omitempty"`
}

// ListApplicationSubTypesParamsSortSortOrder defines parameters for ListApplicationSubTypes.
type ListApplicationSubTypesParamsSortSortOrder string

// ListApplicationTypesParams defines parameters for ListApplicationTypes.
type ListApplicationTypesParams struct {
	// Получение статей по строке
	Search     *string     `json:"search,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	Sort       *Sort       `json:"sort,omitempty"`
}

// ListApplicationTypesParamsSortSortOrder defines parameters for ListApplicationTypes.
type ListApplicationTypesParamsSortSortOrder string

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody CreateUserPayload

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Идентификаторы хабов, по которым нужно получить статьи.
	PerformerId *[]string `json:"performer_id,omitempty"`

	// Идентификаторы авторов, по которым нужно получить статьи.
	CreatorId *string `json:"creator_id,omitempty"`

	// Получение пользоваеля по роли
	Role *UserRole `json:"role,omitempty"`

	// Получение статей по строке
	Search     *string     `json:"search,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	Sort       *Sort       `json:"sort,omitempty"`
}

// ListUsersParamsSortSortOrder defines parameters for ListUsers.
type ListUsersParamsSortSortOrder string

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody CreateApplicationJSONBody

// UpdateApplicationJSONRequestBody defines body for UpdateApplication for application/json ContentType.
type UpdateApplicationJSONRequestBody UpdateApplicationJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание заявки.
	// (POST /application)
	CreateApplication(w http.ResponseWriter, r *http.Request)
	// Получение заявки по идентификатору.
	// (GET /application/{applicationId})
	GetApplication(w http.ResponseWriter, r *http.Request, applicationId string)
	// Редактирование заявки.
	// (PATCH /application/{applicationId})
	UpdateApplication(w http.ResponseWriter, r *http.Request, applicationId string)
	// Получение списка статей.
	// (GET /applications)
	ListApplications(w http.ResponseWriter, r *http.Request, params ListApplicationsParams)
	// Получение списка подтипов заявок.
	// (GET /applications/subtypes)
	ListApplicationSubTypes(w http.ResponseWriter, r *http.Request, params ListApplicationSubTypesParams)
	// Получение списка типов заявок.
	// (GET /applications/types)
	ListApplicationTypes(w http.ResponseWriter, r *http.Request, params ListApplicationTypesParams)
	// Создание пользователя.
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Удаление пользователя.
	// (DELETE /user/{userId})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId string)
	// Получение пользователя по идентификатору.
	// (GET /user/{userId})
	GetUser(w http.ResponseWriter, r *http.Request, userId string)
	// Получение списка пользователей.
	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateApplication operation middleware
func (siw *ServerInterfaceWrapper) CreateApplication(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateApplication(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApplication operation middleware
func (siw *ServerInterfaceWrapper) GetApplication(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "applicationId" -------------
	var applicationId string

	err = runtime.BindStyledParameter("simple", false, "applicationId", chi.URLParam(r, "applicationId"), &applicationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "applicationId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApplication(w, r, applicationId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateApplication operation middleware
func (siw *ServerInterfaceWrapper) UpdateApplication(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "applicationId" -------------
	var applicationId string

	err = runtime.BindStyledParameter("simple", false, "applicationId", chi.URLParam(r, "applicationId"), &applicationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "applicationId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateApplication(w, r, applicationId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListApplications operation middleware
func (siw *ServerInterfaceWrapper) ListApplications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicationsParams

	// ------------- Optional query parameter "performer_id" -------------
	if paramValue := r.URL.Query().Get("performer_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "performer_id", r.URL.Query(), &params.PerformerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "performer_id", Err: err})
		return
	}

	// ------------- Optional query parameter "creator_id" -------------
	if paramValue := r.URL.Query().Get("creator_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator_id", r.URL.Query(), &params.CreatorId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creator_id", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination" -------------
	if paramValue := r.URL.Query().Get("pagination"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "pagination", r.URL.Query(), &params.Pagination)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListApplications(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListApplicationSubTypes operation middleware
func (siw *ServerInterfaceWrapper) ListApplicationSubTypes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicationSubTypesParams

	// ------------- Optional query parameter "typeId" -------------
	if paramValue := r.URL.Query().Get("typeId"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "typeId", r.URL.Query(), &params.TypeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeId", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination" -------------
	if paramValue := r.URL.Query().Get("pagination"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "pagination", r.URL.Query(), &params.Pagination)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListApplicationSubTypes(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListApplicationTypes operation middleware
func (siw *ServerInterfaceWrapper) ListApplicationTypes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicationTypesParams

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination" -------------
	if paramValue := r.URL.Query().Get("pagination"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "pagination", r.URL.Query(), &params.Pagination)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListApplicationTypes(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "performer_id" -------------
	if paramValue := r.URL.Query().Get("performer_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "performer_id", r.URL.Query(), &params.PerformerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "performer_id", Err: err})
		return
	}

	// ------------- Optional query parameter "creator_id" -------------
	if paramValue := r.URL.Query().Get("creator_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator_id", r.URL.Query(), &params.CreatorId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creator_id", Err: err})
		return
	}

	// ------------- Optional query parameter "role" -------------
	if paramValue := r.URL.Query().Get("role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := r.URL.Query().Get("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination" -------------
	if paramValue := r.URL.Query().Get("pagination"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "pagination", r.URL.Query(), &params.Pagination)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("deepObject", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/application", wrapper.CreateApplication)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/application/{applicationId}", wrapper.GetApplication)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/application/{applicationId}", wrapper.UpdateApplication)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/applications", wrapper.ListApplications)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/applications/subtypes", wrapper.ListApplicationSubTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/applications/types", wrapper.ListApplicationTypes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{userId}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{userId}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})

	return r
}
